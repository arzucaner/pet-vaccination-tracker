{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/arzug/Documents/pet_vaccination_tracker/src/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma "],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI;AAEhC,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/arzug/Documents/pet_vaccination_tracker/src/app/api/vaccinations/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/db';\r\nimport { parseISO } from 'date-fns';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const vaccinations = await prisma.vaccination.findMany({\r\n      orderBy: { dueDate: 'asc' },\r\n    });\r\n    return NextResponse.json(vaccinations);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to fetch vaccinations' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const { name, dueDate } = await req.json();\r\n    if (!name || !dueDate) {\r\n      return NextResponse.json({ error: 'Name and dueDate are required' }, { status: 400 });\r\n    }\r\n    const vaccination = await prisma.vaccination.create({\r\n      data: {\r\n        name,\r\n        dueDate: parseISO(dueDate),\r\n      },\r\n    });\r\n    return NextResponse.json(vaccination, { status: 201 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to create vaccination' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function PATCH(req: NextRequest) {\r\n  try {\r\n    const { id, lastCompleted, dueDate } = await req.json();\r\n    if (!id || !lastCompleted || !dueDate) {\r\n      return NextResponse.json({ error: 'id, lastCompleted, and dueDate are required' }, { status: 400 });\r\n    }\r\n    const vaccination = await prisma.vaccination.update({\r\n      where: { id },\r\n      data: {\r\n        lastCompleted: parseISO(lastCompleted),\r\n        dueDate: parseISO(dueDate),\r\n      },\r\n    });\r\n    return NextResponse.json(vaccination);\r\n  } catch (error) {\r\n    return NextResponse.json({ error: 'Failed to update vaccination' }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":";;;;;AAAA;AACA;;;;;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,eAAe,MAAM,kHAAA,CAAA,SAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;YACrD,SAAS;gBAAE,SAAS;YAAM;QAC5B;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QACxC,IAAI,CAAC,QAAQ,CAAC,SAAS;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgC,GAAG;gBAAE,QAAQ;YAAI;QACrF;QACA,MAAM,cAAc,MAAM,kHAAA,CAAA,SAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YAClD,MAAM;gBACJ;gBACA,SAAS,SAAS;YACpB;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,aAAa;YAAE,QAAQ;QAAI;IACtD,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;AACF;AAEO,eAAe,MAAM,GAAgB;IAC1C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;QACrD,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS;YACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8C,GAAG;gBAAE,QAAQ;YAAI;QACnG;QACA,MAAM,cAAc,MAAM,kHAAA,CAAA,SAAM,CAAC,WAAW,CAAC,MAAM,CAAC;YAClD,OAAO;gBAAE;YAAG;YACZ,MAAM;gBACJ,eAAe,SAAS;gBACxB,SAAS,SAAS;YACpB;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA+B,GAAG;YAAE,QAAQ;QAAI;IACpF;AACF","debugId":null}}]
}